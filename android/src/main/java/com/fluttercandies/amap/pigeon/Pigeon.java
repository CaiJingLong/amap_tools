// Autogenerated from Pigeon (v3.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.fluttercandies.amap.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  public enum PigeonAmapCoordinateType {
    baidu(0),
    mapbar(1),
    gps(2),
    mapabc(3),
    sosomap(4),
    aliyun(5),
    google(6);

    private int index;
    private PigeonAmapCoordinateType(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AMapLatLng {
    private @NonNull Double latitude;
    public @NonNull Double getLatitude() { return latitude; }
    public void setLatitude(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"latitude\" is null.");
      }
      this.latitude = setterArg;
    }

    private @NonNull Double longitude;
    public @NonNull Double getLongitude() { return longitude; }
    public void setLongitude(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"longitude\" is null.");
      }
      this.longitude = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private AMapLatLng() {}
    public static final class Builder {
      private @Nullable Double latitude;
      public @NonNull Builder setLatitude(@NonNull Double setterArg) {
        this.latitude = setterArg;
        return this;
      }
      private @Nullable Double longitude;
      public @NonNull Builder setLongitude(@NonNull Double setterArg) {
        this.longitude = setterArg;
        return this;
      }
      public @NonNull AMapLatLng build() {
        AMapLatLng pigeonReturn = new AMapLatLng();
        pigeonReturn.setLatitude(latitude);
        pigeonReturn.setLongitude(longitude);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("latitude", latitude);
      toMapResult.put("longitude", longitude);
      return toMapResult;
    }
    static @NonNull AMapLatLng fromMap(@NonNull Map<String, Object> map) {
      AMapLatLng pigeonResult = new AMapLatLng();
      Object latitude = map.get("latitude");
      pigeonResult.setLatitude((Double)latitude);
      Object longitude = map.get("longitude");
      pigeonResult.setLongitude((Double)longitude);
      return pigeonResult;
    }
  }
  private static class AMapToolApiCodec extends StandardMessageCodec {
    public static final AMapToolApiCodec INSTANCE = new AMapToolApiCodec();
    private AMapToolApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AMapLatLng.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AMapLatLng) {
        stream.write(128);
        writeValue(stream, ((AMapLatLng) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AMapToolApi {
    @NonNull AMapLatLng convertLatLng(@NonNull AMapLatLng latLng, @NonNull Long type);
    @NonNull Double calculateDistance(@NonNull AMapLatLng latLng1, @NonNull AMapLatLng latLng2);
    @NonNull Double calculateArea(@NonNull AMapLatLng latLng1, @NonNull AMapLatLng latLng2);
    @NonNull Double calculateAreaOfPolygon(@NonNull List<AMapLatLng> latLngs);

    /** The codec used by AMapToolApi. */
    static MessageCodec<Object> getCodec() {
      return AMapToolApiCodec.INSTANCE;
    }

    /** Sets up an instance of `AMapToolApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AMapToolApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AMapToolApi.convertLatLng", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              AMapLatLng latLngArg = (AMapLatLng)args.get(0);
              if (latLngArg == null) {
                throw new NullPointerException("latLngArg unexpectedly null.");
              }
              Number typeArg = (Number)args.get(1);
              if (typeArg == null) {
                throw new NullPointerException("typeArg unexpectedly null.");
              }
              AMapLatLng output = api.convertLatLng(latLngArg, (typeArg == null) ? null : typeArg.longValue());
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AMapToolApi.calculateDistance", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              AMapLatLng latLng1Arg = (AMapLatLng)args.get(0);
              if (latLng1Arg == null) {
                throw new NullPointerException("latLng1Arg unexpectedly null.");
              }
              AMapLatLng latLng2Arg = (AMapLatLng)args.get(1);
              if (latLng2Arg == null) {
                throw new NullPointerException("latLng2Arg unexpectedly null.");
              }
              Double output = api.calculateDistance(latLng1Arg, latLng2Arg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AMapToolApi.calculateArea", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              AMapLatLng latLng1Arg = (AMapLatLng)args.get(0);
              if (latLng1Arg == null) {
                throw new NullPointerException("latLng1Arg unexpectedly null.");
              }
              AMapLatLng latLng2Arg = (AMapLatLng)args.get(1);
              if (latLng2Arg == null) {
                throw new NullPointerException("latLng2Arg unexpectedly null.");
              }
              Double output = api.calculateArea(latLng1Arg, latLng2Arg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AMapToolApi.calculateAreaOfPolygon", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              List<AMapLatLng> latLngsArg = (List<AMapLatLng>)args.get(0);
              if (latLngsArg == null) {
                throw new NullPointerException("latLngsArg unexpectedly null.");
              }
              Double output = api.calculateAreaOfPolygon(latLngsArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
